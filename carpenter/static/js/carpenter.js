// Generated by CoffeeScript 1.6.1
(function() {
  var File, Files, Image, ImageThumbnailView, ImageToolsView, ImageView, Images, Page, PageThumbnailView, PageView, Pages, Project, ProjectRouter, Table, Tables, ThumbnailListView, ThumbnailView, allImages;

  Project = Backbone.Model.extend({
    initialize: function() {
      return this.set({
        'files': new Files(this.get('files'))
      });
    }
  });

  File = Backbone.Model.extend({
    initialize: function() {
      return this.set({
        'pages': new Pages(this.get('pages'))
      });
    }
  });

  Files = Backbone.Collection.extend({
    model: File
  });

  Page = Backbone.Model.extend({
    initialize: function() {
      allImages.add(this.get('images'));
      return this.set({
        'images': new Images(this.get('images'))
      });
    }
  });

  Pages = Backbone.Collection.extend({
    model: Page
  });

  Image = Backbone.Model.extend({
    initialize: function() {
      return this.set({
        'tables': new Tables(this.get('tables'))
      });
    }
  });

  Images = Backbone.Collection.extend({
    model: Image
  });

  Table = Backbone.Model.extend({
    initialize: function() {
      return this.set({
        'data': JSON.parse(this.get('data'))
      });
    }
  });

  Tables = Backbone.Collection.extend({
    model: Table
  });

  ThumbnailListView = Backbone.View.extend({
    tagName: 'ul',
    id: 'thumbnails',
    render: function() {
      var _this = this;
      this.options.collection.each(function(li, i) {
        var _ref;
        return _this.$el.append((new _this.options.itemClass({
          item: li,
          selected: li.id === ((_ref = _this.options.selected) != null ? _ref.id : void 0),
          number: i
        })).render());
      });
      return this.$el;
    }
  });

  ThumbnailView = Backbone.View.extend({
    tagName: "li",
    className: "thumbnail",
    render: function() {
      var a;
      a = $('<a>', {
        href: this.getLink()
      });
      a.append($('<img>', {
        src: Carpenter.options["static"] + this.getImage()
      }));
      if (this.options.selected) {
        this.$el.addClass('selected');
      }
      return this.$el.append(a);
    }
  });

  PageThumbnailView = ThumbnailView.extend({
    getImage: function() {
      return this.options.item.get('thumbnail');
    },
    getLink: function() {
      return "#file/" + (this.options.item.get('file')) + "/page/" + this.options.item.id;
    }
  });

  ImageThumbnailView = ThumbnailView.extend({
    getImage: function() {
      return this.options.item.get('path');
    },
    getLink: function() {
      return "#image/" + this.options.item.id;
    }
  });

  PageView = Backbone.View.extend({
    tagName: "div",
    className: "page",
    render: function() {
      this.$el.append($('<img>', {
        src: Carpenter.options["static"] + this.options.page.get('image')
      }));
      this.options.page.get('images').each(function(img) {});
      return this.$el;
    }
  });

  ImageView = Backbone.View.extend({
    tagName: "div",
    className: "image",
    render: function() {
      this.$el.append($('<img>', {
        src: Carpenter.options["static"] + this.options.image.get('path')
      }));
      return this.$el;
    }
  });

  ImageToolsView = Backbone.View.extend({
    tagName: "div",
    className: "image-tools",
    events: {
      'click .find-tables': 'findTables',
      'click .show-tables': 'showTables'
    },
    findTables: function(e) {
      e.preventDefault();
      return $.post("./image/" + this.options.image.id + "/analyze");
    },
    showTables: function(e) {
      var out;
      out = '';
      this.options.image.get('tables').each(function(table) {
        var cell, row, _i, _j, _len, _len1, _ref;
        out += '<table class="table table-bordered">';
        _ref = table.get('data');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          row = _ref[_i];
          out += '<tr>';
          for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
            cell = row[_j];
            if (cell) {
              cell.colspan = cell.colspan || 1;
              cell.rowspan = cell.rowspan || 1;
              out += "<td rowspan='" + cell.rowspan + "' colspan='" + cell.colspan + "'>" + cell.text + "</td>";
            }
          }
          out += '<tr>';
        }
        return out += '</table>';
      });
      return $('#page-container').html(out);
    },
    render: function() {
      this.$el.append($('<button>', {
        'class': 'btn find-tables'
      }).text('Analyze'));
      this.$el.append($('<button>', {
        'class': 'btn show-tables'
      }).text('Show Tables'));
      return this.$el;
    }
  });

  allImages = new Images;

  ProjectRouter = Backbone.Router.extend({
    initialize: function(options) {
      return this.project = new Project(options.project);
    },
    routes: {
      '': 'index',
      'file/:fileid': 'showFileFirstPage',
      'file/:fileid/page/:pageid': 'showPage',
      'image/:imageid': 'showImage'
    },
    index: function() {
      var img;
      img = allImages.first();
      if (img) {
        return this.navigate('image/' + img.id, {
          trigger: true
        });
      }
    },
    showFileFirstPage: function(fileid) {
      var file, page;
      file = this.project.get('files').get(fileid);
      page = file.get('pages').first();
      return Carpenter.router.navigate("file/" + file.id + "/page/" + page.id, {
        trigger: true
      });
    },
    showPage: function(fileid, pageid) {
      var file, page, pageView, thumbnails;
      file = this.project.get('files').get(fileid);
      page = file.get('pages').get(pageid);
      thumbnails = new ThumbnailListView({
        itemClass: PageThumbnailView,
        collection: file.get('pages'),
        selected: page
      });
      $('#thumbnail-container').html(thumbnails.render());
      pageView = new PageView({
        page: page
      });
      return $('#page-container').html(pageView.render());
    },
    showImage: function(imageid) {
      var imageTools, imageView, img, thumbnails;
      img = allImages.get(imageid);
      thumbnails = new ThumbnailListView({
        itemClass: ImageThumbnailView,
        collection: allImages,
        selected: img
      });
      $('#thumbnail-container').html(thumbnails.render());
      imageView = new ImageView({
        image: img
      });
      $('#page-container').html(imageView.render());
      imageTools = new ImageToolsView({
        image: img
      });
      return $('#tools-container').html(imageTools.render());
    }
  });

  window.Carpenter = {
    setup: function(project, options) {
      this.options = options;
      this.router = new ProjectRouter({
        project: project
      });
      return Backbone.history.start();
    }
  };

}).call(this);
